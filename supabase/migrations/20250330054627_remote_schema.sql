create type "public"."approval_status" as enum ('draft', 'submitted', 'approved', 'declined', 'revision_requested');

create type "public"."entity_type" as enum ('site_diary', 'form', 'entries', 'tasks');

create table "public"."approval_approvers" (
    "approver_id" uuid not null,
    "approval_id" bigint not null
);


alter table "public"."approval_approvers" enable row level security;

create table "public"."approvals" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "entity_id" bigint generated by default as identity not null,
    "entity_type" entity_type not null,
    "last_updated" timestamp without time zone not null default now(),
    "requester_id" uuid,
    "status" approval_status not null default 'draft'::approval_status,
    "user_id" uuid default auth.uid()
);


alter table "public"."approvals" enable row level security;

CREATE UNIQUE INDEX approval_approvers_pkey ON public.approval_approvers USING btree (approver_id, approval_id);

CREATE UNIQUE INDEX approvals_pkey ON public.approvals USING btree (id);

alter table "public"."approval_approvers" add constraint "approval_approvers_pkey" PRIMARY KEY using index "approval_approvers_pkey";

alter table "public"."approvals" add constraint "approvals_pkey" PRIMARY KEY using index "approvals_pkey";

alter table "public"."approval_approvers" add constraint "approval_approvers_approval_id_fkey" FOREIGN KEY (approval_id) REFERENCES approvals(id) not valid;

alter table "public"."approval_approvers" validate constraint "approval_approvers_approval_id_fkey";

alter table "public"."approval_approvers" add constraint "approval_approvers_approver_id_fkey" FOREIGN KEY (approver_id) REFERENCES auth.users(id) not valid;

alter table "public"."approval_approvers" validate constraint "approval_approvers_approver_id_fkey";

alter table "public"."approvals" add constraint "approvals_requester_id_fkey" FOREIGN KEY (requester_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."approvals" validate constraint "approvals_requester_id_fkey";

alter table "public"."approvals" add constraint "approvals_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."approvals" validate constraint "approvals_user_id_fkey";

grant delete on table "public"."approval_approvers" to "anon";

grant insert on table "public"."approval_approvers" to "anon";

grant references on table "public"."approval_approvers" to "anon";

grant select on table "public"."approval_approvers" to "anon";

grant trigger on table "public"."approval_approvers" to "anon";

grant truncate on table "public"."approval_approvers" to "anon";

grant update on table "public"."approval_approvers" to "anon";

grant delete on table "public"."approval_approvers" to "authenticated";

grant insert on table "public"."approval_approvers" to "authenticated";

grant references on table "public"."approval_approvers" to "authenticated";

grant select on table "public"."approval_approvers" to "authenticated";

grant trigger on table "public"."approval_approvers" to "authenticated";

grant truncate on table "public"."approval_approvers" to "authenticated";

grant update on table "public"."approval_approvers" to "authenticated";

grant delete on table "public"."approval_approvers" to "service_role";

grant insert on table "public"."approval_approvers" to "service_role";

grant references on table "public"."approval_approvers" to "service_role";

grant select on table "public"."approval_approvers" to "service_role";

grant trigger on table "public"."approval_approvers" to "service_role";

grant truncate on table "public"."approval_approvers" to "service_role";

grant update on table "public"."approval_approvers" to "service_role";

grant delete on table "public"."approvals" to "anon";

grant insert on table "public"."approvals" to "anon";

grant references on table "public"."approvals" to "anon";

grant select on table "public"."approvals" to "anon";

grant trigger on table "public"."approvals" to "anon";

grant truncate on table "public"."approvals" to "anon";

grant update on table "public"."approvals" to "anon";

grant delete on table "public"."approvals" to "authenticated";

grant insert on table "public"."approvals" to "authenticated";

grant references on table "public"."approvals" to "authenticated";

grant select on table "public"."approvals" to "authenticated";

grant trigger on table "public"."approvals" to "authenticated";

grant truncate on table "public"."approvals" to "authenticated";

grant update on table "public"."approvals" to "authenticated";

grant delete on table "public"."approvals" to "service_role";

grant insert on table "public"."approvals" to "service_role";

grant references on table "public"."approvals" to "service_role";

grant select on table "public"."approvals" to "service_role";

grant trigger on table "public"."approvals" to "service_role";

grant truncate on table "public"."approvals" to "service_role";

grant update on table "public"."approvals" to "service_role";

create policy "Enable insert for authenticated users only"
on "public"."approval_approvers"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."approval_approvers"
as permissive
for select
to authenticated
using (true);


create policy "Enable insert for users based on user_id"
on "public"."approvals"
as permissive
for insert
to authenticated
with check ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable read access for all users"
on "public"."approvals"
as permissive
for select
to authenticated
using (true);


create policy "Update approvals for authorized approvers"
on "public"."approvals"
as permissive
for update
to authenticated
using ((EXISTS ( SELECT 1
   FROM approval_approvers
  WHERE ((approval_approvers.approval_id = approvals.id) AND (approval_approvers.approver_id = ( SELECT auth.uid() AS uid))))))
with check (true);




