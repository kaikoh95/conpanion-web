-- Migration: Update approval logic for multiple approvers
-- Description: This migration adds individual approver status tracking and automatic
-- status calculation for multiple approver workflows

-- Add individual approver status tracking
CREATE TABLE public.approval_approver_responses (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  approval_id BIGINT NOT NULL REFERENCES public.approvals(id) ON DELETE CASCADE,
  approver_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  status approval_status NOT NULL DEFAULT 'submitted',
  comment TEXT,
  responded_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(approval_id, approver_id)
);

-- Enable RLS
ALTER TABLE public.approval_approver_responses ENABLE ROW LEVEL SECURITY;

-- Create policies for approver responses
CREATE POLICY "Approvers can view their own responses"
ON public.approval_approver_responses 
FOR SELECT
TO authenticated
USING (approver_id = auth.uid());

CREATE POLICY "Approvers can insert their own responses"
ON public.approval_approver_responses 
FOR INSERT
TO authenticated
WITH CHECK (approver_id = auth.uid());

CREATE POLICY "Approvers can update their own responses"
ON public.approval_approver_responses 
FOR UPDATE
TO authenticated
USING (approver_id = auth.uid());

-- Grant permissions
GRANT ALL ON public.approval_approver_responses TO authenticated;
GRANT ALL ON public.approval_approver_responses TO service_role;

-- Function to calculate overall approval status based on individual responses
CREATE OR REPLACE FUNCTION calculate_approval_status(approval_id_param BIGINT)
RETURNS approval_status AS $$
DECLARE
  total_approvers INTEGER;
  approved_count INTEGER;
  declined_count INTEGER;
  revision_count INTEGER;
BEGIN
  -- Count total approvers
  SELECT COUNT(*) INTO total_approvers
  FROM approval_approvers aa
  WHERE aa.approval_id = approval_id_param;
  
  -- Count responses by status
  SELECT 
    COUNT(CASE WHEN aar.status = 'approved' THEN 1 END),
    COUNT(CASE WHEN aar.status = 'declined' THEN 1 END),
    COUNT(CASE WHEN aar.status = 'revision_requested' THEN 1 END)
  INTO approved_count, declined_count, revision_count
  FROM approval_approver_responses aar
  WHERE aar.approval_id = approval_id_param;
  
  -- If any approver declined or requested revision, overall status reflects that
  IF declined_count > 0 THEN
    RETURN 'declined';
  ELSIF revision_count > 0 THEN
    RETURN 'revision_requested';
  ELSIF approved_count = total_approvers THEN
    RETURN 'approved';
  ELSE
    RETURN 'submitted';
  END IF;
END;
$$ LANGUAGE plpgsql;

-- Trigger to auto-update approval status when approver responds
CREATE OR REPLACE FUNCTION update_approval_status_on_response()
RETURNS TRIGGER AS $$
BEGIN
  UPDATE approvals 
  SET 
    status = calculate_approval_status(NEW.approval_id),
    last_updated = NOW()
  WHERE id = NEW.approval_id;
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER approval_status_update_trigger
  AFTER INSERT OR UPDATE ON approval_approver_responses
  FOR EACH ROW
  EXECUTE FUNCTION update_approval_status_on_response();
